name: CI/CD Docker

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE_SERVER: ghcr.io/${{ github.actor }}/olenaelim_server
  DOCKER_IMAGE_CLIENT: ghcr.io/${{ github.actor }}/olenaelim_client
  VERSION: ${{ github.sha }}
  NAME: olenaelim_cicd

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.OLENAELIM_GHCR_TOKEN }}
      
      - name: Server Build and Push
        id: server_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE_SERVER }}:latest
      
      - name: Client Build and Push
        id: client_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE_CLIENT }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.OLENAELIM_GHCR_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.DOCKER_IMAGE_SERVER }} && docker rm ${{ env.DOCKER_IMAGE_SERVER }} && docker rmi ${{ env.DOCKER_IMAGE_SERVER }}:latest
          docker run -d -p 8080:5000 --name ${{ env.DOCKER_IMAGE_SERVER }} --restart always ${{ env.DOCKER_IMAGE_SERVER }}:latest
          
          docker stop ${{ env.DOCKER_IMAGE_CLIENT }} && docker rm ${{ env.DOCKER_IMAGE_CLIENT }} && docker rmi ${{ env.DOCKER_IMAGE_CLIENT }}:latest
          docker run -d -p 8080:5000 --name ${{ env.DOCKER_IMAGE_CLIENT }} --restart always ${{ env.DOCKER_IMAGE_CLIENT }}:latest
